import sys
import os
import glob
import re
import gzip
import click
import array
import loompy
import numpy as np
import csv
from collections import defaultdict
import logging
from typing import *
import velocyto as vcy
from ._run import _run


logging.basicConfig(stream=sys.stdout, format='%(asctime)s - %(levelname)s - %(message)s', level=logging.DEBUG)


@click.command(short_help="Runs the velocity analysis for a Chromium Sample")
@click.argument("samplefolder",
                type=click.Path(exists=True,
                                file_okay=False,
                                dir_okay=True,
                                readable=True,
                                writable=True,
                                resolve_path=True))
@click.argument("ivlfile",
                type=click.Path(exists=True,
                                file_okay=True,
                                dir_okay=False,
                                readable=True,
                                resolve_path=True))
@click.option("--metadatatable", "-s",
              help="Table containing metadata of the various samples (csv fortmated, [row:samples, col:entry])",
              default=None,
              type=click.Path(resolve_path=True,
                              file_okay=True,
                              dir_okay=False,
                              readable=True))
@click.option("--repmask", "-m",
              help=".gtf file containing intrvals sorted by chromosome, strand, position\n(e.g. generated by running `velocyto extract_repeats mm10_rmsk.gtf`)",
              default=None,
              type=click.Path(resolve_path=True,
                              file_okay=True,
                              dir_okay=False,
                              readable=True))
@click.option("--introns", "-z",
              help="introns validation heuristic mode. if `strict` if will require exon-intron spanning evidence; if `permissive` it does not check for spanning",
              default="strict")
@click.option("--allbarcodes/--filteredbarcodes", "-b/-f",
              help="retain all cell barcodes. This flag permits all 10x cell barcodes to be analysed for the .loom file, instead of only those called as cells by CellRanger",
              default=False,
              is_flag=True)
@click.option("--debug", "-d",
              help="debug mode. It will generate .sam files of individual reads (not molecules) that are identified as exons, introns, ambiguous and chimeras",
              default=False,
              is_flag=True)
def run10x(samplefolder: str, ivlfile: str,
           metadatatable: str, repmask: str, introns: str,
           debug: bool) -> None:
    """Runs the velocity analysis for a Chromium 10X Sample

    10XSAMPLEFOLDER specifies the cellranger sample folder

    IVLFILE text file generated by velocyto extract_intervals
    """

    # Check that the 10X analysis was run successfully
    if "Pipestance completed successfully!" not in open(os.path.join(samplefolder, "_log")).read():
        raise IOError("The outputs are not ready")
    bamfile = os.path.join(samplefolder, "outs", "possorted_genome_bam.bam")
    # Select correct barcode file
    if allbarcodes:
      bcfile = glob.glob(os.path.join(samplefolder,
                         os.path.normcase("outs/raw_gene_bc_matrices/*/barcodes.tsv")))[0]
    else:
      bcfile = glob.glob(os.path.join(samplefolder,
                         os.path.normcase("outs/filtered_gene_bc_matrices/*/barcodes.tsv")))[0]
    outputfolder = os.path.join(samplefolder, "velocyto")
    sampleid = os.path.basename(samplefolder.rstrip("/").rstrip("\\"))
    assert not os.path.exists(os.path.join(outputfolder, f"{sampleid}.loom")), "The output already exist. Aborted!"
    additional_ca = {}
    try:
        tsne_file = os.path.join(samplefolder, "outs", "analysis", "tsne", "2_components", "projection.csv")
        if os.path.exists(tsne_file):
            tsne = np.loadtxt(tsne_file, usecols=(1, 2), delimiter=',', skiprows=1)
            additional_ca["_X"] = tsne[:, 0].astype('float32')
            additional_ca["_Y"] = tsne[:, 1].astype('float32')

        clusters_file = os.path.join(samplefolder, "outs", "analysis", "clustering", "graphclust", "clusters.csv")
        if os.path.exists(clusters_file):
            labels = np.loadtxt(clusters_file, usecols=(1, ), delimiter=',', skiprows=1)
            additional_ca["Clusters"] = labels.astype('int') - 1

    except Exception:
        logging.error("Some IO problem in loading cellranger tsne/pca/kmeans files occurred!")

    return _run(bamfile=bamfile, ivlfile=ivlfile, bcfile=bcfile, outputfolder=outputfolder,
                sampleid=sampleid, metadatatable=metadatatable, repmask=repmask,
                debug=debug, intron_validation=introns, additional_ca=additional_ca)
